# -*- coding: utf-8 -*-
"""Untitled38.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14nnLJ0HQ6DYiiPrCBH-hPUex4ITEjsOg
"""

import streamlit as st
import requests
import random
import base64
from PIL import Image
from io import BytesIO

# ğŸ”’ Token de GitHub (NO compartir con nadie en el cÃ³digo directamente)
GITHUB_TOKEN = "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"

# ğŸ“‚ ConfiguraciÃ³n del repositorio privado
OWNER = "jsfa2002"
REPO = "fotos_lindas"
IMAGE_PATH = "imagenesmYm"  # AsegÃºrate de que es el nombre correcto de la carpeta

# ğŸ”¹ FunciÃ³n para obtener imÃ¡genes del repo privado
def obtener_lista_imagenes():
    url = f"https://api.github.com/repos/{OWNER}/{REPO}/contents/{IMAGE_PATH}"
    headers = {"Authorization": f"Bearer {GITHUB_TOKEN}"}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return [file["path"] for file in response.json() if file["name"].endswith((".png", ".jpg", ".jpeg"))]
    else:
        st.error(f"Error al obtener imÃ¡genes. CÃ³digo {response.status_code}")
        return []

# ğŸ”¹ FunciÃ³n para descargar imÃ¡genes privadas
def descargar_imagen(path):
    url = f"https://api.github.com/repos/{OWNER}/{REPO}/contents/{path}"
    headers = {"Authorization": f"Bearer {GITHUB_TOKEN}"}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        image_data = response.json()["content"]  # Base64
        image_bytes = BytesIO(base64.b64decode(image_data))  # Decodificar imagen
        return Image.open(image_bytes)
    else:
        st.error(f"No se pudo cargar la imagen. CÃ³digo {response.status_code}")
        return None

# ğŸ“· Cargar imÃ¡genes
image_paths = obtener_lista_imagenes()

# ğŸ–¼ Mostrar imagen aleatoria al presionar el botÃ³n
if image_paths:
    if "img_index" not in st.session_state:
        st.session_state.img_index = random.randint(0, len(image_paths) - 1)

    if st.button("Te amo ğŸ’•"):
        st.session_state.img_index = random.randint(0, len(image_paths) - 1)

    # Descargar y mostrar la imagen
    image = descargar_imagen(image_paths[st.session_state.img_index])
    if image:
        st.image(image, use_column_width=True)

    # âœ¨ Mensaje bonito
    st.markdown("<h2 style='text-align: center; color: pink;'>Eres lo mÃ¡s boni de mi mundo ğŸŒ¸</h2>", unsafe_allow_html=True)
else:
    st.warning("No hay imÃ¡genes disponibles.")